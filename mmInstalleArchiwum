#!/usr/bin/env bash

#
# Instalacja i wstepna konfiguracja usługi eArchiwum
# Autor Piotr Najman (c) 2021 MIT License
# pnajman@vespe.pl
#

set -e
cd ~/

#### sprawdznie czy są dostępne wymagane repozytoria, podsumowanie przed startem skryptu

_ZIPFILE=~/mMods_AR_pkg.zip
_PUBFILE=6BE2C3585DBC60D372043A560D129B3C.crt
_KEYFILE=6BE2C3585DBC60D372043A560D129B3C.key
_CERTS=0

if [ ! -f $_ZIPFILE ]; then
   echo "File $_ZIPFILE which is needed does not exist, exiting."
   exit 0
else
   echo "Found $_ZIPFILE repository."
fi

if [ -f $_KEYFILE ] && [ -f $_PUBFILE ]; then
   echo "Found private and public keys."
   _CERTS=1
else 
   echo "Private or public org both keys does not exists."
fi

if [ $_CERTS -ne 1 ]; then
	echo "Public or private key does not exist, SSL Apache configuration will be skipped."
else
	echo "SSL keys founded, SSL Apache configuration will be processed."
fi

read -rsn1 -p "Press any key to continue or Ctrl+C for exit."
echo

cat << EOF > /etc/apache2/sites-available/eArchiwum.conf
<VirtualHost *:80>
        # The ServerName directive sets the request scheme, hostname and port that
        # the server uses to identify itself. This is used when creating
        # redirection URLs. In the context of virtual hosts, the ServerName
        # specifies what hostname must appear in the request's Host: header to
        # match this virtual host. For the default virtual host (this file) this
        # value is not decisive as it is used as a last resort host regardless.
        # However, you must set it for any further virtual host explicitly.
        #ServerName www.example.com

        ServerAdmin it@example.com
        DocumentRoot /var/www

	ServerName localhost
	ProxyPreserveHost On
	ProxyPass /Archiwum http://localhost:5003/
	ProxyPassReverse /Archiwum http://localhost:5003/
	ProxyPass /mMDAB http://localhost:5001/
	ProxyPassReverse /mMDAB http://localhost:5001/

        # Available loglevels: trace8, ..., trace1, debug, info, notice, warn,
        # error, crit, alert, emerg.
        # It is also possible to configure the loglevel for particular
        # modules, e.g.
        #LogLevel info ssl:warn

        ErrorLog \${APACHE_LOG_DIR}/error.log
        CustomLog \${APACHE_LOG_DIR}/access.log combined

        # For most configuration files from conf-available/, which are
        # enabled or disabled at a global level, it is possible to
        # include a line for only one particular virtual host. For example the
        # following line enables the CGI configuration for this host only
        # after it has been globally disabled with "a2disconf".
        #Include conf-available/serve-cgi-bin.conf
		
	RequestHeader set "X-Forwarded-Proto" expr=%{REQUEST_SCHEME}
		
</VirtualHost>


# vim: syntax=apache ts=4 sw=4 sts=4 sr noet
EOF


a2ensite eArchiwum

#### konfiguracja ssl apache2 jeżeli sa klucze
if [ $_CERTS -eq 1 ]; then

cp ~/$_PUBFILE /etc/ssl/certs/
cp ~/$_KEYFILE /etc/ssl/private/

cat << EOF > /etc/apache2/sites-available/eArchiwum-ssl.conf
<IfModule mod_ssl.c>
        <VirtualHost _default_:443>
                ServerAdmin it@example.com

                DocumentRoot /var/www

		ProxyPreserveHost On
		ProxyPass /Archiwum http://localhost:5003/
		ProxyPassReverse /Archiwum http://localhost:5003/
		ProxyPass /mMDAB http://localhost:5001/
		ProxyPassReverse /mMDAB http://localhost:5001/

                # Available loglevels: trace8, ..., trace1, debug, info, notice, warn,
                # error, crit, alert, emerg.
                # It is also possible to configure the loglevel for particular
                # modules, e.g.
                #LogLevel info ssl:warn

                ErrorLog \${APACHE_LOG_DIR}/error.log
                CustomLog \${APACHE_LOG_DIR}/access.log combined

                # For most configuration files from conf-available/, which are
                # enabled or disabled at a global level, it is possible to
                # include a line for only one particular virtual host. For example the
                # following line enables the CGI configuration for this host only
                # after it has been globally disabled with "a2disconf".
                #Include conf-available/serve-cgi-bin.conf

                #   SSL Engine Switch:
                #   Enable/Disable SSL for this virtual host.
                SSLEngine on

		#Header edit Set-Cookie ^(.*)$ $1;Secure
		SSLProtocol +TLSv1.2

                #   A self-signed (snakeoil) certificate can be created by installing
                #   the ssl-cert package. See
                #   /usr/share/doc/apache2/README.Debian.gz for more info.
                #   If both key and certificate are stored in the same file, only the
                #   SSLCertificateFile directive is needed.
                SSLCertificateFile      /etc/ssl/certs/$_PUBFILE
                SSLCertificateKeyFile /etc/ssl/private/$_KEYFILE

                #   Server Certificate Chain:
                #   Point SSLCertificateChainFile at a file containing the
                #   concatenation of PEM encoded CA certificates which form the
                #   certificate chain for the server certificate. Alternatively
                #   the referenced file can be the same as SSLCertificateFile
                #   when the CA certificates are directly appended to the server
                #   certificate for convinience.
                #SSLCertificateChainFile /etc/apache2/ssl.crt/server-ca.crt

                #   Certificate Authority (CA):
                #   Set the CA certificate verification path where to find CA
                #   certificates for client authentication or alternatively one
                #   huge file containing all of them (file must be PEM encoded)
                #   Note: Inside SSLCACertificatePath you need hash symlinks
                #                to point to the certificate files. Use the provided
                #                Makefile to update the hash symlinks after changes.
                #SSLCACertificatePath /etc/ssl/certs/
                #SSLCACertificateFile /etc/apache2/ssl.crt/ca-bundle.crt

                #   Certificate Revocation Lists (CRL):
                #   Set the CA revocation path where to find CA CRLs for client
                #   authentication or alternatively one huge file containing all
                #   of them (file must be PEM encoded)
                #   Note: Inside SSLCARevocationPath you need hash symlinks
                #                to point to the certificate files. Use the provided
                #                Makefile to update the hash symlinks after changes.
                #SSLCARevocationPath /etc/apache2/ssl.crl/
                #SSLCARevocationFile /etc/apache2/ssl.crl/ca-bundle.crl

                #   Client Authentication (Type):
                #   Client certificate verification type and depth.  Types are
                #   none, optional, require and optional_no_ca.  Depth is a
                #   number which specifies how deeply to verify the certificate
                #   issuer chain before deciding the certificate is not valid.
                #SSLVerifyClient require
                #SSLVerifyDepth  10

                #   SSL Engine Options:
                #   Set various options for the SSL engine.
                #   o FakeBasicAuth:
                #        Translate the client X.509 into a Basic Authorisation.  This means that
                #        the standard Auth/DBMAuth methods can be used for access control.  The
                #        user name is the `one line' version of the client's X.509 certificate.
                #        Note that no password is obtained from the user. Every entry in the user
                #        file needs this password: `xxj31ZMTZzkVA'.
                #   o ExportCertData:
                #        This exports two additional environment variables: SSL_CLIENT_CERT and
                #        SSL_SERVER_CERT. These contain the PEM-encoded certificates of the
                #        server (always existing) and the client (only existing when client
                #        authentication is used). This can be used to import the certificates
                #        into CGI scripts.
                #   o StdEnvVars:
                #        This exports the standard SSL/TLS related \`SSL_*' environment variables.
                #        Per default this exportation is switched off for performance reasons,
                #        because the extraction step is an expensive operation and is usually
                #        useless for serving static content. So one usually enables the
                #        exportation for CGI and SSI requests only.
                #   o OptRenegotiate:
                #        This enables optimized SSL connection renegotiation handling when SSL
                #        directives are used in per-directory context.
                #SSLOptions +FakeBasicAuth +ExportCertData +StrictRequire
                <FilesMatch "\.(cgi|shtml|phtml|php)$">
                                SSLOptions +StdEnvVars
                </FilesMatch>
                <Directory /usr/lib/cgi-bin>
                                SSLOptions +StdEnvVars
                </Directory>

                #   SSL Protocol Adjustments:
                #   The safe and default but still SSL/TLS standard compliant shutdown
                #   approach is that mod_ssl sends the close notify alert but doesn't wait for
                #   the close notify alert from client. When you need a different shutdown
                #   approach you can use one of the following variables:
                #   o ssl-unclean-shutdown:
                #        This forces an unclean shutdown when the connection is closed, i.e. no
                #        SSL close notify alert is send or allowed to received.  This violates
                #        the SSL/TLS standard but is needed for some brain-dead browsers. Use
                #        this when you receive I/O errors because of the standard approach where
                #        mod_ssl sends the close notify alert.
                #   o ssl-accurate-shutdown:
                #        This forces an accurate shutdown when the connection is closed, i.e. a
                #        SSL close notify alert is send and mod_ssl waits for the close notify
                #        alert of the client. This is 100% SSL/TLS standard compliant, but in
                #        practice often causes hanging connections with brain-dead browsers. Use
                #        this only for browsers where you know that their SSL implementation
                #        works correctly.
                #   Notice: Most problems of broken clients are also related to the HTTP
                #   keep-alive facility, so you usually additionally want to disable
                #   keep-alive for those clients, too. Use variable "nokeepalive" for this.
                #   Similarly, one has to force some clients to use HTTP/1.0 to workaround
                #   their broken HTTP/1.1 implementation. Use variables "downgrade-1.0" and
                #   "force-response-1.0" for this.
                # BrowserMatch "MSIE [2-6]" nokeepalive ssl-unclean-shutdown downgrade-1.0 force-response-1.0

        </VirtualHost>
</IfModule>

# vim: syntax=apache ts=4 sw=4 sts=4 sr noet
EOF

a2ensite eArchiwum-ssl

fi

systemctl restart apache2

#### instalacja app

cd ~/

#ZIPFILE=~/mMods_AR_pkg.zip
if [ -f "$_ZIPFILE" ]; then
	unzip mMods_AR_pkg.zip
else 
    echo "$_ZIPFILE does not exists."
	exit 0
fi

mv -f ./Portal\ Archiwum/ ./Archiwum/
mv -f ./Archiwum/ /var/www/
mv -f ./mMDAB/ /var/www/
mv -f ./MIAM/ /var/www/mMDAB/modules/

sed -i 's/'\"ApplicationName\":\ \"\"'/'\"ApplicationName\":\ \"Archiwum\"'/' /var/www/Archiwum/appsettings.json

chmod +w /var/www/Archiwum/application.log
chmod +w /var/www/mMDAB/application.log
chmod +w /var/www/mMDAB/modules/MIAM/application.log
chmod 666 /var/www/mMDAB/modules.xml


#### utworzenie serwisow

#cat << EOF > /sbin/Archiwum.sh
##!/bin/bash
#cd /var/www/Archiwum
#dotnet ./Archiwum.dll &
#EOF

#cat << EOF > /sbin/mMDAB.sh
##!/bin/bash
#cd /var/www/mMDAB
#dotnet ./mMedica.mMDAB.dll &
#EOF

cat << EOF > /lib/systemd/system/mMedica.Archiwum.service
[Unit]
Description = mMedica Archiwum
After = postgresql.service

[Service]
ExecStart=/usr/bin/dotnet /var/www/Archiwum/Archiwum.dll
WorkingDirectory=/var/www/Archiwum
Restart=always
RestartSec=10
SyslogIdentifier=mMedica-Archiwum
User=root
Environment=ASPNETCORE_ENVIRONMENT=Production

[Install]
WantedBy=multi-user.target

EOF

cat << EOF > /lib/systemd/system/mMedica.mMDAB.service
[Unit]
Description = mMedica mMDAB
After = postgresql.service

[Service]
ExecStart=/usr/bin/dotnet /var/www/mMDAB/mMedica.mMDAB.dll
WorkingDirectory=/var/www/mMDAB
#Restart=always
#RestartSec=10
SyslogIdentifier=mMedica-mMDAB
User=root
Environment=ASPNETCORE_ENVIRONMENT=Production

[Install]
WantedBy=multi-user.target
EOF

systemctl daemon-reload


#### start app

systemctl enable mMedica.Archiwum.service
systemctl enable mMedica.mMDAB.service

systemctl start mMedica.Archiwum.service
systemctl start mMedica.mMDAB.service

